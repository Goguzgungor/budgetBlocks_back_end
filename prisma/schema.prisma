generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
}

model main_wallet {
  id                   Int                    @id @default(autoincrement())
  balance              Decimal?               @db.Decimal
  main_wallet_name     String?                @db.VarChar(20)
  main_wallet_id       Int?
  user                 user[]
  user_wallet_relation user_wallet_relation[]
}

model main_wallet_blockchain {
  id              Int      @id @default(autoincrement())
  balance         Decimal? @db.Decimal
  private_key String?  @db.VarChar(100)
  publicKey       String?  @db.VarChar(100)
}

model sub_wallet {
  id                   Int                   @id @default(autoincrement())
  balance              Decimal?              @db.Decimal
  max_val              Decimal?              @db.Decimal
  sub_wallet_name      String?               @db.VarChar(20)
  blockchain_balance   Decimal?              @db.Decimal
  e_mail               String?               @map("e-mail") @db.VarChar(50)
  private_key      String?               @db.VarChar(100)
  password             String?               @db.VarChar(50)
  user_name            String?               @db.VarChar(50)
  public_key           String?               @db.VarChar(100)
  user_wallet_relation user_wallet_relation?
}

model transaction {
  id                      Int                   @id @default(autoincrement())
  balance                 Decimal?              @db.Decimal
  status                  String?               @db.VarChar(50)
  user_wallet_relation_id Int?
  receiver_pub_key        String?               @db.VarChar(100)
  user_wallet_relation    user_wallet_relation? @relation(fields: [user_wallet_relation_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_transaction.user_wallet_relation_id")
}

model user {
  id                   Int                    @id @default(autoincrement())
  user_name            String?                @db.VarChar(50)
  e_mail               String?                @map("e-mail") @db.VarChar(50)
  password             String?                @db.VarChar(50)
  mainwallet_id        Int?
  main_wallet          main_wallet?           @relation(fields: [mainwallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_wallet_relation.mainwallet_id")
  user_wallet_relation user_wallet_relation[]
}

model user_wallet_relation {
  id            Int           @id @default(autoincrement())
  user_id       Int?
  mainwallet_id Int?
  sub_wallet_id Int?          @unique
  transaction   transaction[]
  main_wallet   main_wallet?  @relation(fields: [mainwallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_wallet_relation.mainwallet_id")
  sub_wallet    sub_wallet?   @relation(fields: [sub_wallet_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_wallet_relation.sub_wallet_id")
  user          user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_user_wallet_relation.user_id")
}
